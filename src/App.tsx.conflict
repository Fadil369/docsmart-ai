<<<<<<< HEAD
import { useState, useEffect } from 'react'
import { Toaster } from '@/components/ui/sonner'
import { Header } from '@/components/Header'
import { Footer } from '@/components/Footer'
import { WorkspaceArea } from '@/components/WorkspaceArea'
import { AppSidebar } from '@/components/AppSidebar'
import { DocumentCard } from '@/components/DocumentCard'
import { LandingPage } from '@/components/LandingPage'
import { AuthModal } from '@/components/auth/AuthModal'
import { UserProfile } from '@/components/auth/UserProfile'
import { PaymentSession } from '@/types/payment'
import { PaymentPage } from '@/components/payment'
import { TrialCountdown } from '@/components/TrialCountdown'
import { useKV } from '@/lib/mock-spark'
import { useTheme } from '@/lib/theme'
import { useSidebar } from '@/lib/use-sidebar'
import { useAuth } from '@/contexts/AuthContext'
import { getOrCreateTrial, getTrialStatus, hasGatedAccess, endTrial, resetTrial } from '@/lib/user-trial'
import { trackPaymentPageView, trackTrialEvent, trackFeatureUsage } from '@/lib/analytics'
import { motion } from 'framer-motion'
import { cn } from '@/lib/utils'
import { aiService } from '@/lib/ai-service'
import { toast } from 'sonner'
=======
import React from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import { DocumentProvider } from './contexts/DocumentContext';
import { Toaster } from 'react-hot-toast';
>>>>>>> main

// Import pages
import HomePage from './pages/HomePage';
import WorkspacePage from './pages/WorkspacePage';
import AnalyticsPage from './pages/AnalyticsPage';
import SettingsPage from './pages/SettingsPage';

// Import layout components
import Navbar from './components/layout/Navbar';
import Sidebar from './components/layout/Sidebar';

// Import styles
import './App.css';

function App() {
<<<<<<< HEAD
  const { isAuthenticated, user } = useAuth()
  const [documents, setDocuments] = useKV<Document[]>('documents', [])
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid')
  const [showLanding, setShowLanding] = useState(false) // Temporarily skip landing
  const [currentPage, setCurrentPage] = useState<'app' | 'payment'>('app')
  const [showAuth, setShowAuth] = useState(false)
  const [showProfile, setShowProfile] = useState(false)
  const [showPayments, setShowPayments] = useState(false) // New payment page state
  const [activeActions, setActiveActions] = useState<string[]>([])
  const [actionProgress, setActionProgress] = useState<Record<string, number>>({})
  const [aiCopilotReady, setAiCopilotReady] = useState(false)
  
  // Initialize theme and sidebar on app load
  useTheme()
  const { isOpen, isMobile } = useSidebar()

  // Initialize trial system
  useEffect(() => {
    getOrCreateTrial()
    
    // Expose trial functions globally for debugging/testing
    if (typeof window !== 'undefined') {
      window.trialDebug = {
        getOrCreateTrial,
        getTrialStatus,
        hasGatedAccess,
        endTrial,
        resetTrial,
        trackTrialEvent,
        trackFeatureUsage
      }
    }
  }, [])

  // Handle routing based on hash
  useEffect(() => {
    const handleHashChange = () => {
      const hash = window.location.hash
      if (hash === '#/payment') {
        setCurrentPage('payment')
        trackPaymentPageView('hash_navigation')
      } else {
        setCurrentPage('app')
      }
    }

    // Check initial hash
    handleHashChange()

    // Listen for hash changes
    window.addEventListener('hashchange', handleHashChange)
    return () => window.removeEventListener('hashchange', handleHashChange)
  }, [])

  // Initialize AI Copilot Assistant on app load
  useEffect(() => {
    const initializeAiCopilot = async () => {
      try {
        await aiService.initialize()
        setAiCopilotReady(true)
        toast.success('AI Copilot Assistant is ready!', {
          description: 'Advanced document analysis and insights are now available.'
        })
      } catch (error) {
        console.error('Failed to initialize AI Copilot:', error)
        toast.warning('AI Copilot initialization failed', {
          description: 'Some AI features may be limited. Please try refreshing the page.'
        })
      }
    }

    initializeAiCopilot()
  }, [])

  const handleActionClick = async (actionId: string, files?: File[]) => {
    if (activeActions.includes(actionId)) return

    setActiveActions(prev => [...prev, actionId])
    setActionProgress(prev => ({ ...prev, [actionId]: 0 }))

    try {
      switch (actionId) {
        case 'upload':
          if (files) {
            await handleFilesUploaded(files)
          }
          break
        
        case 'translate':
          await simulateProgress(actionId, 'Translation completed')
          break
        
        case 'compress':
          await simulateProgress(actionId, 'Compression completed with 70% size reduction')
          break
        
        case 'merge':
          await simulateProgress(actionId, 'Documents merged successfully')
          break
        
        case 'analyze':
          await simulateProgress(actionId, 'Analysis completed - insights generated')
          break
        
        case 'ai-analyze':
          await simulateProgress(actionId, 'AI Copilot analysis completed with advanced insights')
          break
        
        case 'share':
          await simulateProgress(actionId, 'Document shared with team members')
          break
        
        case 'collaborate':
          await simulateProgress(actionId, 'Collaboration session started')
          break
        
        case 'template':
          await simulateProgress(actionId, 'Template created successfully')
          break
        
        case 'copy':
          await simulateProgress(actionId, 'Document copied')
          break
        
        case 'export':
          await simulateProgress(actionId, 'Document exported in multiple formats')
          break
      }
    } catch (error) {
      toast.error(`${actionId} failed: ${error}`)
    } finally {
      setTimeout(() => {
        setActiveActions(prev => prev.filter(id => id !== actionId))
        setActionProgress(prev => {
          // Remove the completed action
          const newProgress = { ...prev }
          delete newProgress[actionId]
          return newProgress
        })
      }, 1000)
    }
  }

  const simulateProgress = async (actionId: string, successMessage: string) => {
    for (let i = 0; i <= 100; i += 10) {
      setActionProgress(prev => ({ ...prev, [actionId]: i }))
      await new Promise(resolve => setTimeout(resolve, 100))
    }
    toast.success(successMessage)
  }

  const handleFilesUploaded = async (uploadedFiles: File[]) => {
    const newDocuments: Document[] = uploadedFiles.map(file => ({
      id: Math.random().toString(36).substr(2, 9),
      name: file.name,
      size: file.size,
      type: file.type,
      status: 'processing',
      uploadedAt: new Date(),
      progress: 0
    }))

    setDocuments(currentDocs => [...currentDocs, ...newDocuments])

    // Simulate processing
    for (const doc of newDocuments) {
      for (let progress = 0; progress <= 100; progress += 20) {
        setDocuments(currentDocs =>
          currentDocs.map(d =>
            d.id === doc.id ? { ...d, progress } : d
          )
        )
        await new Promise(resolve => setTimeout(resolve, 200))
      }
      
      setDocuments(currentDocs =>
        currentDocs.map(d =>
          d.id === doc.id ? { ...d, status: 'completed', progress: 100 } : d
        )
      )
    }
  }

  const handleGetStarted = () => {
    setShowLanding(false)
    if (!isAuthenticated) {
      setShowAuth(true)
    }
  }

  const handleAuthClose = () => {
    setShowAuth(false)
  }

  const handleProfileClose = () => {
    setShowProfile(false)
  }

  const handleProfileClick = () => {
    setShowProfile(true)
  }

  const handlePaymentsClick = () => {
    setShowPayments(true)
  }

  const handlePaymentsClose = () => {
    setShowPayments(false)
  }

  const handlePaymentSuccess = (_session: PaymentSession) => {
    toast.success('Payment successful!', {
      description: 'Your access has been activated.'
    })
    setShowPayments(false)
  }

  if (showPayments) {
    return (
      <>
        <PaymentPage 
          onClose={handlePaymentsClose}
          onSuccess={handlePaymentSuccess}
        />
        <Toaster />
      </>
    )
  }

  const handleBackToApp = () => {
    setCurrentPage('app')
    window.location.hash = '#/'
  }

  if (showLanding) {
    return (
      <>
        <LandingPage onGetStarted={handleGetStarted} />
        <Toaster />
      </>
    )
  }

  // Show payment page
  if (currentPage === 'payment') {
    return (
      <>
        <PaymentPage onBackToApp={handleBackToApp} />
        <Toaster />
      </>
    )
  }

=======
>>>>>>> main
  return (
    <DocumentProvider>
      <Router>
        <div className="App">
          {/* Toast notifications */}
          <Toaster
            position="top-right"
            toastOptions={{
              duration: 4000,
              style: {
                background: '#363636',
                color: '#fff',
              },
              success: {
                duration: 3000,
                iconTheme: {
                  primary: '#4ade80',
                  secondary: '#fff',
                },
              },
              error: {
                duration: 5000,
                iconTheme: {
                  primary: '#ef4444',
                  secondary: '#fff',
                },
              },
            }}
          />

          {/* Navigation */}
          <Navbar />
          
          <div className="app-container">
            <Sidebar />
            
            <main className="main-content">
              <Routes>
                <Route path="/" element={<HomePage />} />
                <Route path="/workspace" element={<WorkspacePage />} />
                <Route path="/analytics" element={<AnalyticsPage />} />
                <Route path="/settings" element={<SettingsPage />} />
              </Routes>
            </main>
          </div>
        </div>
      </Router>
    </DocumentProvider>
  );
}

export default App;
